{"version":3,"sources":["components/Chat/ChatWindow.jsx","components/Chat/Chat.jsx"],"names":["props","room","connected","client","messages","position","userTyping","useState","message","setMessage","useEffect","send","JSON","stringify","style","right","className","name","map","msg","i","next","isLast","from","isUser","key","content","maxRows","value","onChange","event","target","onKeyDown","data","type","to","spellCheck","draggable","placeholder","onClick","path","mdiSend","size","color","setConnected","setMessages","setClient","setUserTyping","openRooms","useContext","ChatContext","token","localStorage","sessionStorage","wss","WebSocket","process","onclose","onerror","error","console","log","onmessage","handleReceiveMessage","parse","connection","typing","call","ChatWindow","receive"],"mappings":"6MAMe,G,OAAA,SAAAA,GAAU,IACbC,EAA4DD,EAA5DC,KAAMC,EAAsDF,EAAtDE,UAAWC,EAA2CH,EAA3CG,OAAQC,EAAmCJ,EAAnCI,SAAUC,EAAyBL,EAAzBK,SAAUC,EAAeN,EAAfM,WADjC,EAEUC,mBAAS,IAFnB,mBAEbC,EAFa,KAEJC,EAFI,KAIpBC,qBAAU,WACNP,EAAOQ,KAAKC,KAAKC,UAAUZ,MAE5B,IAsBH,OACI,yBAAKa,MAAO,CAAEC,MAAOV,GAAYW,UAAU,cACvC,yBAAKA,UAAU,QACX,2BAAIf,EAAKgB,MAAQhB,EAAKA,OAE1B,yBAAKe,UAAU,QACVZ,EACGA,EAASc,KAAI,SAACC,EAAKC,GACf,IAAMC,EAAOjB,EAASgB,EAAI,KAAM,EAC1BE,EAASD,GAAQF,EAAII,OAASF,EAAKE,KACzC,OACI,yBACIP,UAAS,4BACLG,EAAIK,OAAS,OAAS,UADjB,OAENF,EAAS,QAAU,IACtBG,IAAKL,GAEL,2BAAID,EAAIO,QAAQlB,aAK5B,qCAEHF,GAAc,8CAEnB,yBAAKU,UAAU,UACX,yBAAKA,UAAU,WACX,kBAAC,IAAD,CACIW,QAAS,EACTC,MAAOpB,EACPqB,SAAU,SAAAC,GAAK,OAAIrB,EAAWqB,EAAMC,OAAOH,QAC3CI,UAxCC,WACjB,IAAMC,EAAO,CACTC,KAAM,SACNC,GAAIlC,EAAKA,MAEbE,EAAOQ,KAAKC,KAAKC,UAAUoB,KAoCXG,WAAW,QACXC,UAAU,QACVC,YAAY,uBAGpB,yBAAKtB,UAAU,WACX,kBAAC,IAAD,CACIA,UAAU,YACVuB,QA7DM,WACtB,IAAMN,EAAO,CACTC,KAAM,UACNC,GAAIlC,EAAKA,KACTyB,QAAS,CACLlB,YAGRC,EAAW,IACXP,GAAaC,EAAOQ,KAAKC,KAAKC,UAAUoB,KAqDxBO,KAAMC,IACNC,KAAM,GACNC,MAAM,iB,8NC1Ef,qBAAO,IAAD,EACiBpC,oBAAS,GAD1B,mBACVL,EADU,KACC0C,EADD,OAEerC,mBAAS,IAFxB,mBAEVH,EAFU,KAEAyC,EAFA,OAGWtC,mBAAS,MAHpB,mBAGVJ,EAHU,KAGF2C,EAHE,OAImBvC,oBAAS,GAJ5B,mBAIVD,EAJU,KAIEyC,EAJF,KAKTC,EAAcC,qBAAWC,KAAzBF,UAERtC,qBAAU,WACN,IAAMyC,EAAQC,aAAaD,OAASE,eAAeF,MAC7CG,EAAM,IAAIC,UAAJ,UACLC,4BADK,kBAC+BL,IAE3CG,EAAIG,QAAU,kBAAMb,GAAa,IACjCU,EAAII,QAAU,SAAAC,GACVC,QAAQC,IAAR,2BAAgCF,IAChCf,GAAa,IAEjBU,EAAIQ,UAAY,SAAAhC,GAAK,OAAIiC,EAAqBjC,IAC9CgB,EAAUQ,KACX,IAEH,IAAMS,EAAuB,SAAAjC,GACzB,IAAMG,EAAOrB,KAAKoD,MAAMlC,EAAMG,OAEzB,CACGzB,QAAS,kBACLqC,GAAY,SAAAzC,GAAQ,O,yVAAA,IACbA,EADa,eAEf6B,EAAKE,GAFU,sBAEA/B,EAAS6B,EAAKE,KAAO,IAFrB,CAE0BF,UAElDgC,WAAY,kBAAMrB,GAAa,IAC/BsB,OAAQ,WACJnB,GAAc,MAEpBd,EAAKC,MAAUiC,QAGzB,OAAOnB,EAAU9B,KAAI,SAACjB,EAAMmB,GAAP,OACjB,kBAACgD,EAAD,CACI3C,IAAKL,EACLlB,UAAWA,EACXD,KAAMA,EACNI,SAAoB,KAATe,EAAI,GAAW,IAC1BjB,OAAQA,EACRkE,QAASN,EACT3D,SAAUA,EAASH,EAAKA,MACxBK,WAAYA","file":"static/js/3.671d90b0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport Icon from '@mdi/react';\r\nimport { mdiSend } from '@mdi/js';\r\nimport './Chat.scss';\r\n\r\nexport default props => {\r\n    const { room, connected, client, messages, position, userTyping } = props;\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        client.send(JSON.stringify(room));\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const handleSendMessage = () => {\r\n        const data = {\r\n            type: 'message',\r\n            to: room.room,\r\n            content: {\r\n                message,\r\n            },\r\n        };\r\n        setMessage('');\r\n        connected && client.send(JSON.stringify(data));\r\n    };\r\n\r\n    const handleTyping = () => {\r\n        const data = {\r\n            type: 'typing',\r\n            to: room.room,\r\n        };\r\n        client.send(JSON.stringify(data));\r\n    };\r\n\r\n    return (\r\n        <div style={{ right: position }} className=\"chat-popup\">\r\n            <div className=\"head\">\r\n                <p>{room.name || room.room}</p>\r\n            </div>\r\n            <div className=\"chat\">\r\n                {messages ? (\r\n                    messages.map((msg, i) => {\r\n                        const next = messages[i + 1] || true;\r\n                        const isLast = next && msg.from !== next.from;\r\n                        return (\r\n                            <div\r\n                                className={`text-message from-${\r\n                                    msg.isUser ? 'user' : 'friend'\r\n                                }${isLast ? ' last' : ''}`}\r\n                                key={i}\r\n                            >\r\n                                <p>{msg.content.message}</p>\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <></>\r\n                )}\r\n                {userTyping && <p>User is typing</p>}\r\n            </div>\r\n            <div className=\"footer\">\r\n                <div className=\"message\">\r\n                    <TextareaAutosize\r\n                        maxRows={5}\r\n                        value={message}\r\n                        onChange={event => setMessage(event.target.value)}\r\n                        onKeyDown={handleTyping}\r\n                        spellCheck=\"false\"\r\n                        draggable=\"false\"\r\n                        placeholder=\"Type your message\"\r\n                    />\r\n                </div>\r\n                <div className=\"actions\">\r\n                    <Icon\r\n                        className=\"send-icon\"\r\n                        onClick={handleSendMessage}\r\n                        path={mdiSend}\r\n                        size={0.7}\r\n                        color=\"#303030\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { ChatContext } from '../../config/context';\r\nimport ChatWindow from './ChatWindow';\r\nimport './Chat.scss';\r\n\r\nexport default () => {\r\n    const [connected, setConnected] = useState(false);\r\n    const [messages, setMessages] = useState({});\r\n    const [client, setClient] = useState(null);\r\n    const [userTyping, setUserTyping] = useState(false);\r\n    const { openRooms } = useContext(ChatContext);\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.token || sessionStorage.token;\r\n        const wss = new WebSocket(\r\n            `${process.env.REACT_APP_CHAT}?token=${token}`\r\n        );\r\n        wss.onclose = () => setConnected(false);\r\n        wss.onerror = error => {\r\n            console.log(`WebSocket error: ${error}`);\r\n            setConnected(false);\r\n        };\r\n        wss.onmessage = event => handleReceiveMessage(event);\r\n        setClient(wss);\r\n    }, []);\r\n\r\n    const handleReceiveMessage = event => {\r\n        const data = JSON.parse(event.data);\r\n        (() =>\r\n            ({\r\n                message: () =>\r\n                    setMessages(messages => ({\r\n                        ...messages,\r\n                        [data.to]: [...(messages[data.to] || []), data],\r\n                    })),\r\n                connection: () => setConnected(true),\r\n                typing: () => {\r\n                    setUserTyping(true);\r\n                },\r\n            }[data.type]))().call();\r\n    };\r\n\r\n    return openRooms.map((room, i) => (\r\n        <ChatWindow\r\n            key={i}\r\n            connected={connected}\r\n            room={room}\r\n            position={(i + 1) * 325 - 100}\r\n            client={client}\r\n            receive={handleReceiveMessage}\r\n            messages={messages[room.room]}\r\n            userTyping={userTyping}\r\n        />\r\n    ));\r\n};\r\n"],"sourceRoot":""}