{"version":3,"sources":["components/Friends/FriendsList.jsx","components/Friends/Friends.jsx"],"names":["data","setOpenRooms","useContext","ChatContext","className","followers","length","map","friend","i","key","onClick","console","log","handleFriendClick","src","profilePic","process","noProfilePic","alt","user","rooms","room","type","chatId","name","chatName","handleRoomClick","props","useState","setData","useEffect","api","get","then","forEach","chatType","userId","users","catch","error","FriendsList","placeholder","icon","path","mdiMagnify","size","color"],"mappings":"6MAIe,cAAe,IAAZA,EAAW,EAAXA,KACNC,EAAiBC,qBAAWC,KAA5BF,aAiBR,OACI,yBAAKG,UAAU,gBACVJ,EAAKK,UAAUC,OACZ,oCACI,uBAAGF,UAAU,SAAb,aACA,yBAAKA,UAAU,YACdJ,EAAKK,UAAUE,KAAI,SAACC,EAAQC,GAAT,OAChB,yBACIC,IAAKD,EACLE,QAAS,kBAxBP,SAAAH,GACtBI,QAAQC,IAAIL,GAuBuBM,CAAkBN,IACjCJ,UAAU,qBAEV,yBACIW,IACIP,EAAOQ,WAAP,UACSC,8BADT,8BACwDT,EAAOQ,YACzDE,IAEVC,IAAI,UACJf,UAAU,2BAEd,uBAAGA,UAAU,0BACRI,EAAOY,MAEZ,yBAAKhB,UAAU,oBAGvB,yBAAKA,UAAU,aAGnB,qCAEHJ,EAAKqB,MAAMf,OACR,oCACI,uBAAGF,UAAU,SAAb,mBACA,yBAAKA,UAAU,YACdJ,EAAKqB,MAAMd,KAAI,SAACe,EAAMb,GAAP,OACZ,yBACIC,IAAKD,EACLE,QAAS,kBAlDT,SAAAW,GACpBrB,GAAa,SAAAoB,GAAK,4BACXA,GADW,CAEd,CACIE,KAAM,aACND,KAAMA,EAAKE,OACXC,KAAMH,EAAKI,eA4CgBC,CAAgBL,IAC/BlB,UAAU,qBAEV,yBACIW,IAAKG,IACLC,IAAI,UACJf,UAAU,2BAEd,uBAAGA,UAAU,0BACRkB,EAAKI,UAAYJ,EAAKE,aAMvC,uC,ulBCpED,mBAAAI,GAAU,IAAD,EACIC,mBAAS,CAC7BxB,UAAW,GACXgB,MAAO,KAHS,mBACbrB,EADa,KACP8B,EADO,KAmCpB,OA7BAC,qBAAU,WACNC,IAAIC,IAAI,YACHC,MAAK,YAAe,IAAZlC,EAAW,EAAXA,KACCqB,EAAQ,GACdrB,EAAKqB,MAAMc,SAAQ,SAAAb,GAAS,IAEpBE,EAMAF,EANAE,OACAY,EAKAd,EALAc,SACAV,EAIAJ,EAJAI,SACAW,EAGAf,EAHAe,OACAZ,EAEAH,EAFAG,KACAL,EACAE,EADAF,KAEJC,EAAMG,GAAN,KACQH,EAAMG,IAAW,GADzB,CAEIA,SACAY,WACAV,aAEJL,EAAMG,GAAQc,MAAd,sBACQjB,EAAMG,GAAQc,OAAS,IAD/B,CAEI,CAAED,SAAQZ,OAAML,aAGxBU,EAAQ,EAAD,GAAM9B,EAAN,CAAYqB,cAEtBkB,OAAM,SAAAC,GAAK,OAAI5B,QAAQ4B,MAAMA,QACnC,IAGC,kBAAC,IAAD,CAAKpC,UAAU,mBACX,yBAAKA,UAAU,WACX,kBAACqC,EAAD,CAAazC,KAAMA,IACnB,kBAAC,IAAD,CACI0C,YAAY,kBACZC,KACI,kBAAC,IAAD,CACIvC,UAAU,mBACVwC,KAAMC,IACNC,KAAM,GACNC,MAAM,YAGd3C,UAAU","file":"static/js/3.309d1636.chunk.js","sourcesContent":["import React, { useContext } from 'react';\r\nimport { ChatContext } from '../../config/context';\r\nimport noProfilePic from '../../assets/images/no-profile-pic.png';\r\n\r\nexport default ({ data }) => {\r\n    const { setOpenRooms } = useContext(ChatContext);\r\n\r\n    const handleFriendClick = friend => {\r\n        console.log(friend);\r\n    };\r\n\r\n    const handleRoomClick = room => {\r\n        setOpenRooms(rooms => [\r\n            ...rooms,\r\n            {\r\n                type: 'connection',\r\n                room: room.chatId,\r\n                name: room.chatName,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"friends-list\">\r\n            {data.followers.length ? (\r\n                <>\r\n                    <p className=\"label\">Followers</p>\r\n                    <div className=\"divider\" />\r\n                    {data.followers.map((friend, i) => (\r\n                        <div\r\n                            key={i}\r\n                            onClick={() => handleFriendClick(friend)}\r\n                            className=\"profile-item item\"\r\n                        >\r\n                            <img\r\n                                src={\r\n                                    friend.profilePic\r\n                                        ? `${process.env.REACT_APP_API}/img?w=32&h=32&key=${friend.profilePic}`\r\n                                        : noProfilePic\r\n                                }\r\n                                alt=\"profile\"\r\n                                className=\"profile-icon item-icon\"\r\n                            ></img>\r\n                            <p className=\"profile-name item-name\">\r\n                                {friend.user}\r\n                            </p>\r\n                            <div className=\"user-status\" />\r\n                        </div>\r\n                    ))}\r\n                    <div className=\"divider\" />\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n            {data.rooms.length ? (\r\n                <>\r\n                    <p className=\"label\">Recent messages</p>\r\n                    <div className=\"divider\" />\r\n                    {data.rooms.map((room, i) => (\r\n                        <div\r\n                            key={i}\r\n                            onClick={() => handleRoomClick(room)}\r\n                            className=\"profile-item item\"\r\n                        >\r\n                            <img\r\n                                src={noProfilePic}\r\n                                alt=\"profile\"\r\n                                className=\"profile-icon item-icon\"\r\n                            ></img>\r\n                            <p className=\"profile-name item-name\">\r\n                                {room.chatName || room.chatId}\r\n                            </p>\r\n                        </div>\r\n                    ))}\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport api from '../../services/api';\r\nimport { Bar, Input } from '../';\r\nimport FriendsList from './FriendsList';\r\nimport Icon from '@mdi/react';\r\nimport { mdiMagnify } from '@mdi/js';\r\nimport './Friends.scss';\r\n\r\nexport default props => {\r\n    const [data, setData] = useState({\r\n        followers: [],\r\n        rooms: [],\r\n    });\r\n\r\n    useEffect(() => {\r\n        api.get('/friends')\r\n            .then(({ data }) => {\r\n                const rooms = [];\r\n                data.rooms.forEach(room => {\r\n                    const {\r\n                        chatId,\r\n                        chatType,\r\n                        chatName,\r\n                        userId,\r\n                        name,\r\n                        user,\r\n                    } = room;\r\n                    rooms[chatId] = {\r\n                        ...(rooms[chatId] || {}),\r\n                        chatId,\r\n                        chatType,\r\n                        chatName,\r\n                    };\r\n                    rooms[chatId].users = [\r\n                        ...(rooms[chatId].users || []),\r\n                        { userId, name, user },\r\n                    ];\r\n                });\r\n                setData({ ...data, rooms });\r\n            })\r\n            .catch(error => console.error(error));\r\n    }, []);\r\n\r\n    return (\r\n        <Bar className=\"friends-wrapper\">\r\n            <div className=\"friends\">\r\n                <FriendsList data={data} />\r\n                <Input\r\n                    placeholder=\"Find a flyer...\"\r\n                    icon={\r\n                        <Icon\r\n                            className=\"icon search-icon\"\r\n                            path={mdiMagnify}\r\n                            size={0.8}\r\n                            color=\"#303030\"\r\n                        />\r\n                    }\r\n                    className=\"search\"\r\n                />\r\n            </div>\r\n        </Bar>\r\n    );\r\n};\r\n"],"sourceRoot":""}